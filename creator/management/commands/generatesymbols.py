import re
from pathlib import Path

import requests
from django.core.management.base import BaseCommand, CommandError

# Build paths inside the app like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


class Command(BaseCommand):
    help = 'Generate CSS file for symbols from Scryfall symbology API.'

    SCRYFALL_URL = 'https://api.scryfall.com/symbology'

    def add_arguments(self, parser):
        parser.add_argument('output', nargs='?', default=BASE_DIR / 'static/creator/css/symbols.css',
                            help='Output filename to write to.  Default: %(default)s')

    def handle(self, *args, **options):
        try:
            response = requests.get(self.SCRYFALL_URL)
            response.raise_for_status()
            data = response.json()
        except Exception as e:
            raise CommandError("ERROR getting Scryfall API response: {}".format(e))

        if not isinstance(data.get('data'), (list, tuple)):
            raise CommandError("Scryfall returned bad JSON response")

        # Process symbols and write to CSS file.
        try:
            with open(options['output'], 'w') as f:
                f.write("""/* Generated by "generatesymbols" management command.  DO NOT EDIT MANUALLY! */\n""")

                for symbol in data['data']:
                    code = symbol['symbol'].replace('âˆž', 'INFINITY').upper()
                    code = re.sub(r'\W', '', code)
                    url = symbol['svg_uri']
                    line = f"""\n.card-symbol-{code} {{\n    background-image: url("{url}");\n}}\n"""
                    f.write(line)

        except IOError as e:
            raise CommandError("ERROR creating output file {!r}: {}".format(options['output'], e))

        else:
            self.stdout.write(self.style.SUCCESS(f"Successfully wrote to file {options['output']}"))
